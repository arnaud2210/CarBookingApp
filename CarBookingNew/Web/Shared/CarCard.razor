@* @using Data.Models
@code {
    [Parameter] public Car Car { get; set; } = default!;
    [Parameter] public EventCallback<int> OnToggle { get; set; }

    private string GetBadgeClass() => Car.EstReservee ? "bg-danger" : "bg-success";
    private string GetButtonClass() => Car.EstReservee ? "btn-success" : "btn-danger";
    private string GetStatus() => Car.EstReservee ? "Réservée" : "Disponible";
    private string GetActionText() => Car.EstReservee ? "Rendre disponible" : "Réserver";
}

<div class="card mb-3 shadow-sm">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="card-title">@Car.Marque @Car.Modele</h5>
            <span class="badge @GetBadgeClass()">@GetStatus()</span>
        </div>
        <ul class="list-unstyled text-muted">
            <li>Couleur : <strong>@Car.Couleur</strong></li>
            <li>Carburant : <strong>@Car.Carburant</strong></li>
            <li>Places : <strong>@Car.NombreDePlaces</strong></li>
        </ul>
        <button class="btn @GetButtonClass() mt-2" @onclick="() => OnToggle.InvokeAsync(Car.Id)">
            @GetActionText()
        </button>
    </div>
</div>
 *@

@using Data.Models
@inject NavigationManager NavManager

<div class="card mb-4">
    <img src="@GetImageUrl()" class="card-img-top" alt="Voiture" style="max-height:200px; object-fit:cover;" />
    <div class="card-body">
        <h5 class="card-title">@Car.Marque @Car.Modele</h5>
        <p class="card-text">
            <strong>Couleur:</strong> @Car.Couleur<br />
            <strong>Carburant:</strong> @Car.Carburant<br />
            <strong>Places:</strong> @Car.NombreDePlaces
        </p>

        <span class="badge @GetEtatCss()">
            @(Car.EstReservee ? "Indisponible" : "Disponible")
        </span>
        <br />

        <button class="btn btn-primary" @onclick="() => OnToggleReservation.InvokeAsync(Car.Id)">
            @(Car.EstReservee ? "Annuler" : "Réserver")
        </button>

        @* <button class="@GetButtonCss() mt-3"
                @onclick="HandleToggleReservation" type="button">
            @(Car.EstReservee ? "Annuler la réservation" : "Réserver")
        </button> *@
    </div>
</div>

@code {
    [Parameter] public Car Car { get; set; } = default!;
    [Parameter] public EventCallback<int> OnToggleReservation { get; set; }

    private async Task HandleToggleReservation()
    {   
        await OnToggleReservation.InvokeAsync(Car.Id);
    }

    private string GetImageUrl()
    {
        return string.IsNullOrEmpty(Car.ImageUrl)
            ? "images/default.jpg"
            : Car.ImageUrl;
    }

    private string GetEtatCss() =>
        Car.EstReservee ? "bg-warning text-dark" : "bg-success";

    private string GetButtonCss() =>
        Car.EstReservee ? "btn btn-outline-warning" : "btn btn-outline-primary";
}
