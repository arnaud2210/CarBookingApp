@using Data.Models
@code {
    [Parameter] public EventCallback<CarFilter> OnFilter { get; set; }

    private string? couleur;
    private FuelType? carburant;
    private int? places;
    private string? modele;

    private async Task Apply()
    {
        var filter = new CarFilter
        {
            Couleur = couleur,
            Carburant = carburant,
            Places = places,
            Modele = modele
        };

        await OnFilter.InvokeAsync(filter);
    }

    private void Reset()
    {
        couleur = null;
        carburant = null;
        places = null;
        modele = null;
    }
}

<div class="border p-3 mb-4 bg-light rounded">
    <div class="row g-3">
        <div class="col-md-3">
            <input class="form-control" placeholder="Couleur" @bind="couleur" />
        </div>
        <div class="col-md-2">
            <select class="form-select" @bind="carburant">
                <option value="">Carburant</option>
                <option value="@FuelType.Essence">Essence</option>
                <option value="@FuelType.Electrique">Électrique</option>
            </select>
        </div>
        <div class="col-md-2">
            <input class="form-control" type="number" placeholder="Places" @bind="places" />
        </div>
        <div class="col-md-3">
            <input class="form-control" placeholder="Modèle" @bind="modele" />
        </div>
        <div class="col-md-1 d-grid">
            <button class="btn btn-primary" @onclick="Apply">Filtrer</button>
        </div>
        <div class="col-md-1 d-grid">
            <button class="btn btn-outline-secondary" @onclick="Reset">Reset</button>
        </div>
    </div>
</div>


@* @using CarBookingNew.Api
@using Data.Models
@inject CarService CarService

@if (cars == null)
{
    <div class="alert alert-info">Chargement...</div>
}
else if (cars.Count == 0)
{
    <div class="alert alert-warning">Aucune voiture trouvée.</div>
}
else
{
    <div class="row">
        @foreach (var car in cars)
        {
            <div class="col-md-4">
                <CarCard Car="car" OnToggleReservation="ToggleReservation" />
            </div>
        }
    </div>
}

@code {

    [Parameter] public EventCallback<CarFilter> OnFilter { get; set; }

    private List<Car>? cars;

    protected override async Task OnInitializedAsync()
    {
        cars = await CarService.GetAllCarsAsync();
    }

    private async Task ToggleReservation(int carId)
    {
        await CarService.ToggleReservationAsync(carId);
        cars = await CarService.GetAllCarsAsync();
    }

    private async Task ApplyFilter(CarFilter filter)
    {
        cars = await CarService.FilterCarsAsync(
            filter.Couleur,
            filter.Carburant,
            filter.Places,
            filter.Modele
        );
    }
}
 *@

