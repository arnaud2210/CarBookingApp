@page "/cars"
@inject CarService CarService
@using CarBookingNew.Api
@using CarBookingNew.Web.Shared
@using Data.Models

<h2 class="mb-4">Liste des voitures</h2>

<Filters OnFilter="ApplyFilter" />

@if (cars == null)
{
    <div class="alert alert-info">Chargement...</div>
}
else
{
    <div class="row">
        @foreach (var car in cars)
        {
            <div class="col-md-4">
                <CarCard Car="car"
                         OnToggleReservation="HandleToggleReservation" />
            </div>
        }
    </div>
    <p><em>@message</em></p>

}

@code {
    private List<Car> cars = new();

    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        cars = await CarService.GetAllCarsAsync();
    }

    // private async Task ToggleReservation(int carId)
    // {
    //     await CarService.ToggleReservationAsync(carId);
    //     cars = await CarService.GetAllCarsAsync();
    // }

    private async Task ApplyFilter(CarFilter filter)
    {
        cars = await CarService.FilterCarsAsync(
            filter.Couleur,
            filter.Carburant,
            filter.Places,
            filter.Modele
        );
    }

    // private async Task HandleToggleReservation(int carId)
    // {
    //     message = $"Réservation cliquée pour la voiture ID {carId}";
    //     Console.WriteLine(message);

    //     var car = cars.FirstOrDefault(c => c.Id == carId);
    //     if (car is null) return;

    //     if (car.EstReservee)
    //         await CarService.CancelReservationAsync(carId);
    //     else
    //         await CarService.ReserveCarAsync(carId);

    //     cars = await CarService.GetAllCarsAsync();
    //     StateHasChanged();
    // }

    private async Task HandleToggleReservation(int carId)
    {
        Console.WriteLine($"Toggle voiture {carId}");
        await CarService.ToggleReservationAsync(carId);
        cars = await CarService.GetAllCarsAsync(); // Recharge depuis la BDD
        StateHasChanged(); // Forcer la mise à jour de l'affichage
    }

}
